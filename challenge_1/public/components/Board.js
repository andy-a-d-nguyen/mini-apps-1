import Square from './Square.js';
import { calculateWinner } from './helperFunctions.js';

class Board extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      squares: Array(9).fill(null),
      xIsNext: true
    };
    this.clearBoard = this.clearBoard.bind(this);
  }

  handleClick(i) {
    // make a copy of this.state.squares because we don't want to affect it directly
    const squares = this.state.squares.slice(); // ignore click if there's a winner or a square is already filled or board is full

    const isFull = squares.every(square => square !== null);

    if (isFull) {
      alert('full');
      return;
    }

    if (calculateWinner(squares) || squares[i]) {
      return;
    } // assign 'x' or 'o' to the squares that is clicked


    squares[i] = this.state.xIsNext ? 'x' : 'o'; // update this.state.squares with copy of this.state.squares

    this.setState({
      squares: squares,
      xIsNext: !this.state.xIsNext
    });
  }

  renderSquare(i) {
    return /*#__PURE__*/React.createElement(Square, {
      value: this.state.squares[i],
      onClick: () => this.handleClick(i)
    });
  }

  clearBoard(event) {
    this.setState({
      squares: Array(9).fill(null)
    });
  }

  render() {
    const winner = calculateWinner(this.state.squares);
    let status;

    if (winner) {
      status = `Winner: ${winner}`;
    } else {
      status = `Next Player: ${this.state.xIsNext ? 'x' : 'o'}`;
    }

    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
      className: "status"
    }, status), /*#__PURE__*/React.createElement("div", {
      className: "row"
    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement("div", {
      className: "row"
    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement("div", {
      className: "row"
    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)), /*#__PURE__*/React.createElement("button", {
      onClick: this.clearBoard
    }, "Clear Board"));
  }

}

export default Board;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NsaWVudC9jb21wb25lbnRzL0JvYXJkLmpzeCJdLCJuYW1lcyI6WyJTcXVhcmUiLCJjYWxjdWxhdGVXaW5uZXIiLCJCb2FyZCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwic3F1YXJlcyIsIkFycmF5IiwiZmlsbCIsInhJc05leHQiLCJjbGVhckJvYXJkIiwiYmluZCIsImhhbmRsZUNsaWNrIiwiaSIsInNsaWNlIiwiaXNGdWxsIiwiZXZlcnkiLCJzcXVhcmUiLCJhbGVydCIsInNldFN0YXRlIiwicmVuZGVyU3F1YXJlIiwiZXZlbnQiLCJyZW5kZXIiLCJ3aW5uZXIiLCJzdGF0dXMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLE1BQVAsTUFBbUIsYUFBbkI7QUFDQSxTQUFRQyxlQUFSLFFBQThCLHNCQUE5Qjs7QUFFQSxNQUFNQyxLQUFOLFNBQW9CQyxLQUFLLENBQUNDLFNBQTFCLENBQW9DO0FBQ2xDQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUTtBQUNqQixVQUFNQSxLQUFOO0FBRUEsU0FBS0MsS0FBTCxHQUFhO0FBQ1hDLE1BQUFBLE9BQU8sRUFBRUMsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTQyxJQUFULENBQWMsSUFBZCxDQURFO0FBRVhDLE1BQUFBLE9BQU8sRUFBRTtBQUZFLEtBQWI7QUFLQSxTQUFLQyxVQUFMLEdBQWtCLEtBQUtBLFVBQUwsQ0FBZ0JDLElBQWhCLENBQXFCLElBQXJCLENBQWxCO0FBQ0Q7O0FBRURDLEVBQUFBLFdBQVcsQ0FBQ0MsQ0FBRCxFQUFJO0FBQ2I7QUFDQSxVQUFNUCxPQUFPLEdBQUcsS0FBS0QsS0FBTCxDQUFXQyxPQUFYLENBQW1CUSxLQUFuQixFQUFoQixDQUZhLENBR2I7O0FBQ0EsVUFBTUMsTUFBTSxHQUFHVCxPQUFPLENBQUNVLEtBQVIsQ0FBY0MsTUFBTSxJQUFJQSxNQUFNLEtBQUssSUFBbkMsQ0FBZjs7QUFDQSxRQUFJRixNQUFKLEVBQVk7QUFDVkcsTUFBQUEsS0FBSyxDQUFDLE1BQUQsQ0FBTDtBQUNBO0FBQ0Q7O0FBQ0QsUUFBSW5CLGVBQWUsQ0FBQ08sT0FBRCxDQUFmLElBQTRCQSxPQUFPLENBQUNPLENBQUQsQ0FBdkMsRUFBNEM7QUFDMUM7QUFDRCxLQVhZLENBWWI7OztBQUNBUCxJQUFBQSxPQUFPLENBQUNPLENBQUQsQ0FBUCxHQUFhLEtBQUtSLEtBQUwsQ0FBV0ksT0FBWCxHQUFxQixHQUFyQixHQUEyQixHQUF4QyxDQWJhLENBY2I7O0FBQ0EsU0FBS1UsUUFBTCxDQUFjO0FBQ1piLE1BQUFBLE9BQU8sRUFBRUEsT0FERztBQUVaRyxNQUFBQSxPQUFPLEVBQUUsQ0FBQyxLQUFLSixLQUFMLENBQVdJO0FBRlQsS0FBZDtBQUlEOztBQUVEVyxFQUFBQSxZQUFZLENBQUNQLENBQUQsRUFBSTtBQUNkLHdCQUNFLG9CQUFDLE1BQUQ7QUFDRSxNQUFBLEtBQUssRUFBSSxLQUFLUixLQUFMLENBQVdDLE9BQVgsQ0FBbUJPLENBQW5CLENBRFg7QUFFRSxNQUFBLE9BQU8sRUFBSSxNQUFNLEtBQUtELFdBQUwsQ0FBaUJDLENBQWpCO0FBRm5CLE1BREY7QUFNRDs7QUFFREgsRUFBQUEsVUFBVSxDQUFDVyxLQUFELEVBQVE7QUFDaEIsU0FBS0YsUUFBTCxDQUFjO0FBQ1piLE1BQUFBLE9BQU8sRUFBRUMsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTQyxJQUFULENBQWMsSUFBZDtBQURHLEtBQWQ7QUFHRDs7QUFFRGMsRUFBQUEsTUFBTSxHQUFHO0FBQ1AsVUFBTUMsTUFBTSxHQUFHeEIsZUFBZSxDQUFDLEtBQUtNLEtBQUwsQ0FBV0MsT0FBWixDQUE5QjtBQUNBLFFBQUlrQixNQUFKOztBQUNBLFFBQUlELE1BQUosRUFBWTtBQUNWQyxNQUFBQSxNQUFNLEdBQUksV0FBVUQsTUFBTyxFQUEzQjtBQUNELEtBRkQsTUFFTztBQUNMQyxNQUFBQSxNQUFNLEdBQUksZ0JBQWUsS0FBS25CLEtBQUwsQ0FBV0ksT0FBWCxHQUFvQixHQUFwQixHQUEwQixHQUFJLEVBQXZEO0FBQ0Q7O0FBRUQsd0JBQ0UsOENBQ0U7QUFBSyxNQUFBLFNBQVMsRUFBRztBQUFqQixPQUEyQmUsTUFBM0IsQ0FERixlQUVFO0FBQUssTUFBQSxTQUFTLEVBQUc7QUFBakIsT0FDRyxLQUFLSixZQUFMLENBQWtCLENBQWxCLENBREgsRUFFRyxLQUFLQSxZQUFMLENBQWtCLENBQWxCLENBRkgsRUFHRyxLQUFLQSxZQUFMLENBQWtCLENBQWxCLENBSEgsQ0FGRixlQU9FO0FBQUssTUFBQSxTQUFTLEVBQUc7QUFBakIsT0FDRyxLQUFLQSxZQUFMLENBQWtCLENBQWxCLENBREgsRUFFRyxLQUFLQSxZQUFMLENBQWtCLENBQWxCLENBRkgsRUFHRyxLQUFLQSxZQUFMLENBQWtCLENBQWxCLENBSEgsQ0FQRixlQVlFO0FBQUssTUFBQSxTQUFTLEVBQUc7QUFBakIsT0FDRyxLQUFLQSxZQUFMLENBQWtCLENBQWxCLENBREgsRUFFRyxLQUFLQSxZQUFMLENBQWtCLENBQWxCLENBRkgsRUFHRyxLQUFLQSxZQUFMLENBQWtCLENBQWxCLENBSEgsQ0FaRixlQWlCRTtBQUFRLE1BQUEsT0FBTyxFQUFJLEtBQUtWO0FBQXhCLHFCQWpCRixDQURGO0FBcUJEOztBQTlFaUM7O0FBaUZwQyxlQUFlVixLQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNxdWFyZSBmcm9tICcuL1NxdWFyZS5qcyc7XG5pbXBvcnQge2NhbGN1bGF0ZVdpbm5lcn0gZnJvbSAnLi9oZWxwZXJGdW5jdGlvbnMuanMnO1xuXG5jbGFzcyBCb2FyZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNxdWFyZXM6IEFycmF5KDkpLmZpbGwobnVsbCksXG4gICAgICB4SXNOZXh0OiB0cnVlXG4gICAgfVxuXG4gICAgdGhpcy5jbGVhckJvYXJkID0gdGhpcy5jbGVhckJvYXJkLmJpbmQodGhpcyk7XG4gIH1cblxuICBoYW5kbGVDbGljayhpKSB7XG4gICAgLy8gbWFrZSBhIGNvcHkgb2YgdGhpcy5zdGF0ZS5zcXVhcmVzIGJlY2F1c2Ugd2UgZG9uJ3Qgd2FudCB0byBhZmZlY3QgaXQgZGlyZWN0bHlcbiAgICBjb25zdCBzcXVhcmVzID0gdGhpcy5zdGF0ZS5zcXVhcmVzLnNsaWNlKCk7XG4gICAgLy8gaWdub3JlIGNsaWNrIGlmIHRoZXJlJ3MgYSB3aW5uZXIgb3IgYSBzcXVhcmUgaXMgYWxyZWFkeSBmaWxsZWQgb3IgYm9hcmQgaXMgZnVsbFxuICAgIGNvbnN0IGlzRnVsbCA9IHNxdWFyZXMuZXZlcnkoc3F1YXJlID0+IHNxdWFyZSAhPT0gbnVsbCk7XG4gICAgaWYgKGlzRnVsbCkge1xuICAgICAgYWxlcnQoJ2Z1bGwnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhbGN1bGF0ZVdpbm5lcihzcXVhcmVzKSB8fCBzcXVhcmVzW2ldKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGFzc2lnbiAneCcgb3IgJ28nIHRvIHRoZSBzcXVhcmVzIHRoYXQgaXMgY2xpY2tlZFxuICAgIHNxdWFyZXNbaV0gPSB0aGlzLnN0YXRlLnhJc05leHQgPyAneCcgOiAnbyc7XG4gICAgLy8gdXBkYXRlIHRoaXMuc3RhdGUuc3F1YXJlcyB3aXRoIGNvcHkgb2YgdGhpcy5zdGF0ZS5zcXVhcmVzXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzcXVhcmVzOiBzcXVhcmVzLFxuICAgICAgeElzTmV4dDogIXRoaXMuc3RhdGUueElzTmV4dFxuICAgIH0pXG4gIH1cblxuICByZW5kZXJTcXVhcmUoaSkge1xuICAgIHJldHVybiAoXG4gICAgICA8U3F1YXJlXG4gICAgICAgIHZhbHVlID0ge3RoaXMuc3RhdGUuc3F1YXJlc1tpXX1cbiAgICAgICAgb25DbGljayA9IHsoKSA9PiB0aGlzLmhhbmRsZUNsaWNrKGkpfVxuICAgICAgLz5cbiAgICApXG4gIH1cblxuICBjbGVhckJvYXJkKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzcXVhcmVzOiBBcnJheSg5KS5maWxsKG51bGwpXG4gICAgfSlcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB3aW5uZXIgPSBjYWxjdWxhdGVXaW5uZXIodGhpcy5zdGF0ZS5zcXVhcmVzKTtcbiAgICBsZXQgc3RhdHVzO1xuICAgIGlmICh3aW5uZXIpIHtcbiAgICAgIHN0YXR1cyA9IGBXaW5uZXI6ICR7d2lubmVyfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXR1cyA9IGBOZXh0IFBsYXllcjogJHt0aGlzLnN0YXRlLnhJc05leHQ/ICd4JyA6ICdvJ31gXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lID0gJ3N0YXR1cyc+e3N0YXR1c308L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWUgPSAncm93Jz5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJTcXVhcmUoMCl9XG4gICAgICAgICAge3RoaXMucmVuZGVyU3F1YXJlKDEpfVxuICAgICAgICAgIHt0aGlzLnJlbmRlclNxdWFyZSgyKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lID0gJ3Jvdyc+XG4gICAgICAgICAge3RoaXMucmVuZGVyU3F1YXJlKDMpfVxuICAgICAgICAgIHt0aGlzLnJlbmRlclNxdWFyZSg0KX1cbiAgICAgICAgICB7dGhpcy5yZW5kZXJTcXVhcmUoNSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZSA9ICdyb3cnPlxuICAgICAgICAgIHt0aGlzLnJlbmRlclNxdWFyZSg2KX1cbiAgICAgICAgICB7dGhpcy5yZW5kZXJTcXVhcmUoNyl9XG4gICAgICAgICAge3RoaXMucmVuZGVyU3F1YXJlKDgpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrID0ge3RoaXMuY2xlYXJCb2FyZH0+Q2xlYXIgQm9hcmQ8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCb2FyZCJdfQ==