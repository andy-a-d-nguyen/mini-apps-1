class CreditCardForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      creditCardNum: '',
      expiryDate: '',
      CVV: '',
      billingZipCode: ''
    };
    this.storeInput = this.storeInput.bind(this);
    this.submitInput = this.submitInput.bind(this);
  }

  storeInput(event) {
    this.setState({
      [event.target.name]: event.target.value
    });
  }

  submitInput(event) {
    event.preventDefault();
    this.props.addUserInfo(this.state);
  }

  render() {
    return /*#__PURE__*/React.createElement("form", {
      onSubmit: this.submitInput
    }, /*#__PURE__*/React.createElement("label", null, "Credit Card Number:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "creditCardNum",
      value: this.state.creditCardNum,
      onChange: this.storeInput
    })), /*#__PURE__*/React.createElement("label", null, "Expiry Date:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "expiryDate",
      value: this.state.expiryDate,
      onChange: this.storeInput
    })), /*#__PURE__*/React.createElement("label", null, "CVV:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "CVV",
      value: this.state.CVV,
      onChange: this.storeInput
    })), /*#__PURE__*/React.createElement("label", null, "Billing Zip Code:", /*#__PURE__*/React.createElement("input", {
      type: "text",
      name: "billingZipCode",
      value: this.state.billingZipCode,
      onChange: this.storeInput
    })), /*#__PURE__*/React.createElement("button", null, "Confirm"));
  }

}

export default CreditCardForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NsaWVudC9jb21wb25lbnRzL0NyZWRpdENhcmRGb3JtLmpzeCJdLCJuYW1lcyI6WyJDcmVkaXRDYXJkRm9ybSIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwiY3JlZGl0Q2FyZE51bSIsImV4cGlyeURhdGUiLCJDVlYiLCJiaWxsaW5nWmlwQ29kZSIsInN0b3JlSW5wdXQiLCJiaW5kIiwic3VibWl0SW5wdXQiLCJldmVudCIsInNldFN0YXRlIiwidGFyZ2V0IiwibmFtZSIsInZhbHVlIiwicHJldmVudERlZmF1bHQiLCJhZGRVc2VySW5mbyIsInJlbmRlciJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsY0FBTixTQUE2QkMsS0FBSyxDQUFDQyxTQUFuQyxDQUE2QztBQUMzQ0MsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsVUFBTUEsS0FBTjtBQUVBLFNBQUtDLEtBQUwsR0FBYTtBQUNYQyxNQUFBQSxhQUFhLEVBQUUsRUFESjtBQUVYQyxNQUFBQSxVQUFVLEVBQUUsRUFGRDtBQUdYQyxNQUFBQSxHQUFHLEVBQUUsRUFITTtBQUlYQyxNQUFBQSxjQUFjLEVBQUU7QUFKTCxLQUFiO0FBT0EsU0FBS0MsVUFBTCxHQUFrQixLQUFLQSxVQUFMLENBQWdCQyxJQUFoQixDQUFxQixJQUFyQixDQUFsQjtBQUNBLFNBQUtDLFdBQUwsR0FBbUIsS0FBS0EsV0FBTCxDQUFpQkQsSUFBakIsQ0FBc0IsSUFBdEIsQ0FBbkI7QUFDRDs7QUFFREQsRUFBQUEsVUFBVSxDQUFDRyxLQUFELEVBQVE7QUFDaEIsU0FBS0MsUUFBTCxDQUFjO0FBQUMsT0FBQ0QsS0FBSyxDQUFDRSxNQUFOLENBQWFDLElBQWQsR0FBcUJILEtBQUssQ0FBQ0UsTUFBTixDQUFhRTtBQUFuQyxLQUFkO0FBQ0Q7O0FBRURMLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2pCQSxJQUFBQSxLQUFLLENBQUNLLGNBQU47QUFDQSxTQUFLZCxLQUFMLENBQVdlLFdBQVgsQ0FBdUIsS0FBS2QsS0FBNUI7QUFDRDs7QUFFRGUsRUFBQUEsTUFBTSxHQUFHO0FBQ1Asd0JBQ0U7QUFBTSxNQUFBLFFBQVEsRUFBSSxLQUFLUjtBQUF2QixvQkFDRSx1RUFFRTtBQUFPLE1BQUEsSUFBSSxFQUFHLE1BQWQ7QUFBcUIsTUFBQSxJQUFJLEVBQUcsZUFBNUI7QUFBNEMsTUFBQSxLQUFLLEVBQUksS0FBS1AsS0FBTCxDQUFXQyxhQUFoRTtBQUErRSxNQUFBLFFBQVEsRUFBSSxLQUFLSTtBQUFoRyxNQUZGLENBREYsZUFLRSxnRUFFRTtBQUFPLE1BQUEsSUFBSSxFQUFHLE1BQWQ7QUFBcUIsTUFBQSxJQUFJLEVBQUcsWUFBNUI7QUFBeUMsTUFBQSxLQUFLLEVBQUksS0FBS0wsS0FBTCxDQUFXRSxVQUE3RDtBQUF5RSxNQUFBLFFBQVEsRUFBSSxLQUFLRztBQUExRixNQUZGLENBTEYsZUFTRSx3REFFRTtBQUFPLE1BQUEsSUFBSSxFQUFHLE1BQWQ7QUFBcUIsTUFBQSxJQUFJLEVBQUcsS0FBNUI7QUFBa0MsTUFBQSxLQUFLLEVBQUksS0FBS0wsS0FBTCxDQUFXRyxHQUF0RDtBQUEyRCxNQUFBLFFBQVEsRUFBSSxLQUFLRTtBQUE1RSxNQUZGLENBVEYsZUFhRSxxRUFFRTtBQUFPLE1BQUEsSUFBSSxFQUFHLE1BQWQ7QUFBcUIsTUFBQSxJQUFJLEVBQUcsZ0JBQTVCO0FBQTZDLE1BQUEsS0FBSyxFQUFJLEtBQUtMLEtBQUwsQ0FBV0ksY0FBakU7QUFBaUYsTUFBQSxRQUFRLEVBQUksS0FBS0M7QUFBbEcsTUFGRixDQWJGLGVBaUJFLDhDQWpCRixDQURGO0FBcUJEOztBQTlDMEM7O0FBaUQ3QyxlQUFlVixjQUFmIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQ3JlZGl0Q2FyZEZvcm0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBjcmVkaXRDYXJkTnVtOiAnJyxcbiAgICAgIGV4cGlyeURhdGU6ICcnLFxuICAgICAgQ1ZWOiAnJyxcbiAgICAgIGJpbGxpbmdaaXBDb2RlOiAnJ1xuICAgIH1cblxuICAgIHRoaXMuc3RvcmVJbnB1dCA9IHRoaXMuc3RvcmVJbnB1dC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3VibWl0SW5wdXQgPSB0aGlzLnN1Ym1pdElucHV0LmJpbmQodGhpcyk7XG4gIH1cblxuICBzdG9yZUlucHV0KGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7W2V2ZW50LnRhcmdldC5uYW1lXTogZXZlbnQudGFyZ2V0LnZhbHVlfSk7XG4gIH1cblxuICBzdWJtaXRJbnB1dChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5wcm9wcy5hZGRVc2VySW5mbyh0aGlzLnN0YXRlKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGZvcm0gb25TdWJtaXQgPSB7dGhpcy5zdWJtaXRJbnB1dH0+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgICBDcmVkaXQgQ2FyZCBOdW1iZXI6XG4gICAgICAgICAgPGlucHV0IHR5cGUgPSAndGV4dCcgbmFtZSA9ICdjcmVkaXRDYXJkTnVtJyB2YWx1ZSA9IHt0aGlzLnN0YXRlLmNyZWRpdENhcmROdW19IG9uQ2hhbmdlID0ge3RoaXMuc3RvcmVJbnB1dH0vPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgRXhwaXJ5IERhdGU6XG4gICAgICAgICAgPGlucHV0IHR5cGUgPSAndGV4dCcgbmFtZSA9ICdleHBpcnlEYXRlJyB2YWx1ZSA9IHt0aGlzLnN0YXRlLmV4cGlyeURhdGV9IG9uQ2hhbmdlID0ge3RoaXMuc3RvcmVJbnB1dH0vPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgQ1ZWOlxuICAgICAgICAgIDxpbnB1dCB0eXBlID0gJ3RleHQnIG5hbWUgPSAnQ1ZWJyB2YWx1ZSA9IHt0aGlzLnN0YXRlLkNWVn0gb25DaGFuZ2UgPSB7dGhpcy5zdG9yZUlucHV0fS8+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxsYWJlbD5cbiAgICAgICAgICBCaWxsaW5nIFppcCBDb2RlOlxuICAgICAgICAgIDxpbnB1dCB0eXBlID0gJ3RleHQnIG5hbWUgPSAnYmlsbGluZ1ppcENvZGUnIHZhbHVlID0ge3RoaXMuc3RhdGUuYmlsbGluZ1ppcENvZGV9IG9uQ2hhbmdlID0ge3RoaXMuc3RvcmVJbnB1dH0vPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8YnV0dG9uPkNvbmZpcm08L2J1dHRvbj5cbiAgICAgIDwvZm9ybT5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ3JlZGl0Q2FyZEZvcm07Il19