import AccountForm from './AccountForm.js';
import AddressForm from './AddressForm.js'; // checkout main component
// checkout button
// render form on click
// next button
// store user input as an item

class Checkout extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      // userInfo: {},
      userInfo: [],
      showAccountForm: false,
      showAddressForm: false
    };
    this.renderAccountForm = this.renderAccountForm.bind(this);
    this.addUserInfo = this.addUserInfo.bind(this);
    this.renderAddressForm = this.renderAddressForm.bind(this); // this.addAddrInfo = this.addAddrInfo.bind(this);
  }

  addUserInfo(info) {
    console.log('running');
    const updatedUserInfo = Object.assign({}, this.state.userInfo, info);
    this.setState({
      userInfo: updatedUserInfo
    }); // this.setState({userInfo: [...this.state.userInfo, info]});
  } // addAddrInfo(info) {
  //   const updatedAddrInfo = Object.assign({}, this.state.userInfo, info);
  //   this.setState({userInfo: updatedAddrInfo});
  // }


  renderAccountForm(event) {
    // event.preventDefault();
    this.setState({
      showAccountForm: true
    });
  }

  renderAddressForm(event) {
    event.preventDefault();
    this.setState({
      showAddressForm: true
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: this.renderAccountForm
    }, "Checkout"), this.state.showAccountForm ? /*#__PURE__*/React.createElement(AccountForm, {
      addUserInfo: this.addUserInfo,
      renderAddressForm: this.renderAddressForm
    }) : null, this.state.showAddressForm ? /*#__PURE__*/React.createElement(AddressForm, {
      addUserInfo: this.addUserInfo
    }) : null);
  }

}

export default Checkout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NsaWVudC9jb21wb25lbnRzL0NoZWNrb3V0LmpzeCJdLCJuYW1lcyI6WyJBY2NvdW50Rm9ybSIsIkFkZHJlc3NGb3JtIiwiQ2hlY2tvdXQiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsInVzZXJJbmZvIiwic2hvd0FjY291bnRGb3JtIiwic2hvd0FkZHJlc3NGb3JtIiwicmVuZGVyQWNjb3VudEZvcm0iLCJiaW5kIiwiYWRkVXNlckluZm8iLCJyZW5kZXJBZGRyZXNzRm9ybSIsImluZm8iLCJjb25zb2xlIiwibG9nIiwidXBkYXRlZFVzZXJJbmZvIiwiT2JqZWN0IiwiYXNzaWduIiwic2V0U3RhdGUiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGtCQUF4QjtBQUNBLE9BQU9DLFdBQVAsTUFBd0Isa0JBQXhCLEMsQ0FHQTtBQUNBO0FBQ0U7QUFDRjtBQUNBOztBQUNBLE1BQU1DLFFBQU4sU0FBdUJDLEtBQUssQ0FBQ0MsU0FBN0IsQ0FBdUM7QUFDckNDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2pCLFVBQU1BLEtBQU47QUFFQSxTQUFLQyxLQUFMLEdBQWE7QUFDWDtBQUNBQyxNQUFBQSxRQUFRLEVBQUUsRUFGQztBQUdYQyxNQUFBQSxlQUFlLEVBQUUsS0FITjtBQUlYQyxNQUFBQSxlQUFlLEVBQUU7QUFKTixLQUFiO0FBT0EsU0FBS0MsaUJBQUwsR0FBeUIsS0FBS0EsaUJBQUwsQ0FBdUJDLElBQXZCLENBQTRCLElBQTVCLENBQXpCO0FBQ0EsU0FBS0MsV0FBTCxHQUFtQixLQUFLQSxXQUFMLENBQWlCRCxJQUFqQixDQUFzQixJQUF0QixDQUFuQjtBQUNBLFNBQUtFLGlCQUFMLEdBQXlCLEtBQUtBLGlCQUFMLENBQXVCRixJQUF2QixDQUE0QixJQUE1QixDQUF6QixDQVppQixDQWFqQjtBQUNEOztBQUVEQyxFQUFBQSxXQUFXLENBQUNFLElBQUQsRUFBTztBQUNoQkMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksU0FBWjtBQUNBLFVBQU1DLGVBQWUsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQixLQUFLYixLQUFMLENBQVdDLFFBQTdCLEVBQXVDTyxJQUF2QyxDQUF4QjtBQUNBLFNBQUtNLFFBQUwsQ0FBYztBQUFDYixNQUFBQSxRQUFRLEVBQUVVO0FBQVgsS0FBZCxFQUhnQixDQUloQjtBQUNELEdBdEJvQyxDQXdCckM7QUFDQTtBQUNBO0FBQ0E7OztBQUVBUCxFQUFBQSxpQkFBaUIsQ0FBQ1csS0FBRCxFQUFRO0FBQ3ZCO0FBQ0EsU0FBS0QsUUFBTCxDQUFjO0FBQ1paLE1BQUFBLGVBQWUsRUFBRTtBQURMLEtBQWQ7QUFHRDs7QUFFREssRUFBQUEsaUJBQWlCLENBQUNRLEtBQUQsRUFBUTtBQUN2QkEsSUFBQUEsS0FBSyxDQUFDQyxjQUFOO0FBQ0EsU0FBS0YsUUFBTCxDQUFjO0FBQ1pYLE1BQUFBLGVBQWUsRUFBRTtBQURMLEtBQWQ7QUFHRDs7QUFFRGMsRUFBQUEsTUFBTSxHQUFHO0FBQ1Asd0JBQ0UsOENBQ0U7QUFBUSxNQUFBLElBQUksRUFBRyxRQUFmO0FBQXdCLE1BQUEsT0FBTyxFQUFJLEtBQUtiO0FBQXhDLGtCQURGLEVBRUcsS0FBS0osS0FBTCxDQUFXRSxlQUFYLGdCQUE2QixvQkFBQyxXQUFEO0FBQWEsTUFBQSxXQUFXLEVBQUksS0FBS0ksV0FBakM7QUFBOEMsTUFBQSxpQkFBaUIsRUFBSSxLQUFLQztBQUF4RSxNQUE3QixHQUE0SCxJQUYvSCxFQUdHLEtBQUtQLEtBQUwsQ0FBV0csZUFBWCxnQkFBNkIsb0JBQUMsV0FBRDtBQUFhLE1BQUEsV0FBVyxFQUFJLEtBQUtHO0FBQWpDLE1BQTdCLEdBQWdGLElBSG5GLENBREY7QUFPRDs7QUFuRG9DOztBQXNEdkMsZUFBZVgsUUFBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBY2NvdW50Rm9ybSBmcm9tICcuL0FjY291bnRGb3JtLmpzJztcbmltcG9ydCBBZGRyZXNzRm9ybSBmcm9tICcuL0FkZHJlc3NGb3JtLmpzJztcblxuXG4vLyBjaGVja291dCBtYWluIGNvbXBvbmVudFxuLy8gY2hlY2tvdXQgYnV0dG9uXG4gIC8vIHJlbmRlciBmb3JtIG9uIGNsaWNrXG4vLyBuZXh0IGJ1dHRvblxuLy8gc3RvcmUgdXNlciBpbnB1dCBhcyBhbiBpdGVtXG5jbGFzcyBDaGVja291dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIC8vIHVzZXJJbmZvOiB7fSxcbiAgICAgIHVzZXJJbmZvOiBbXSxcbiAgICAgIHNob3dBY2NvdW50Rm9ybTogZmFsc2UsXG4gICAgICBzaG93QWRkcmVzc0Zvcm06IGZhbHNlXG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJBY2NvdW50Rm9ybSA9IHRoaXMucmVuZGVyQWNjb3VudEZvcm0uYmluZCh0aGlzKTtcbiAgICB0aGlzLmFkZFVzZXJJbmZvID0gdGhpcy5hZGRVc2VySW5mby5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVuZGVyQWRkcmVzc0Zvcm0gPSB0aGlzLnJlbmRlckFkZHJlc3NGb3JtLmJpbmQodGhpcyk7XG4gICAgLy8gdGhpcy5hZGRBZGRySW5mbyA9IHRoaXMuYWRkQWRkckluZm8uYmluZCh0aGlzKTtcbiAgfVxuXG4gIGFkZFVzZXJJbmZvKGluZm8pIHtcbiAgICBjb25zb2xlLmxvZygncnVubmluZycpO1xuICAgIGNvbnN0IHVwZGF0ZWRVc2VySW5mbyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhdGUudXNlckluZm8sIGluZm8pO1xuICAgIHRoaXMuc2V0U3RhdGUoe3VzZXJJbmZvOiB1cGRhdGVkVXNlckluZm99KTtcbiAgICAvLyB0aGlzLnNldFN0YXRlKHt1c2VySW5mbzogWy4uLnRoaXMuc3RhdGUudXNlckluZm8sIGluZm9dfSk7XG4gIH1cblxuICAvLyBhZGRBZGRySW5mbyhpbmZvKSB7XG4gIC8vICAgY29uc3QgdXBkYXRlZEFkZHJJbmZvID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZS51c2VySW5mbywgaW5mbyk7XG4gIC8vICAgdGhpcy5zZXRTdGF0ZSh7dXNlckluZm86IHVwZGF0ZWRBZGRySW5mb30pO1xuICAvLyB9XG5cbiAgcmVuZGVyQWNjb3VudEZvcm0oZXZlbnQpIHtcbiAgICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvd0FjY291bnRGb3JtOiB0cnVlXG4gICAgfSlcbiAgfVxuXG4gIHJlbmRlckFkZHJlc3NGb3JtKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNob3dBZGRyZXNzRm9ybTogdHJ1ZVxuICAgIH0pXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gdHlwZSA9ICdidXR0b24nIG9uQ2xpY2sgPSB7dGhpcy5yZW5kZXJBY2NvdW50Rm9ybX0+Q2hlY2tvdXQ8L2J1dHRvbj5cbiAgICAgICAge3RoaXMuc3RhdGUuc2hvd0FjY291bnRGb3JtID8gPEFjY291bnRGb3JtIGFkZFVzZXJJbmZvID0ge3RoaXMuYWRkVXNlckluZm99IHJlbmRlckFkZHJlc3NGb3JtID0ge3RoaXMucmVuZGVyQWRkcmVzc0Zvcm19Lz4gOiBudWxsfVxuICAgICAgICB7dGhpcy5zdGF0ZS5zaG93QWRkcmVzc0Zvcm0gPyA8QWRkcmVzc0Zvcm0gYWRkVXNlckluZm8gPSB7dGhpcy5hZGRVc2VySW5mb30gLz4gOiBudWxsfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDaGVja291dDsiXX0=